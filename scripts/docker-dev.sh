#!/bin/bash

# ==========================================
# CESIZEN - DOCKER DEVELOPMENT SCRIPT
# ==========================================
# Script pour g√©rer l'environnement de d√©veloppement Docker

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
COMPOSE_FILE="$PROJECT_ROOT/docker-compose.yml"
ENV_FILE="$PROJECT_ROOT/.env"
ENV_EXAMPLE="$PROJECT_ROOT/docker.env.example"

# ==========================================
# FONCTIONS UTILITAIRES
# ==========================================

print_header() {
    echo -e "${CYAN}"
    echo "==========================================="
    echo "üßò‚Äç‚ôÄÔ∏è CESIZEN - DOCKER DEVELOPMENT MANAGER"
    echo "==========================================="
    echo -e "${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

print_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# V√©rifier si Docker est install√© et en cours d'ex√©cution
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi

    if ! docker info &> /dev/null; then
        print_error "Docker n'est pas en cours d'ex√©cution. Veuillez le d√©marrer."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
}

# V√©rifier si le fichier .env existe
check_env_file() {
    if [ ! -f "$ENV_FILE" ]; then
        print_warning "Fichier .env non trouv√©. Cr√©ation √† partir de l'exemple..."
        cp "$ENV_EXAMPLE" "$ENV_FILE"
        print_info "Fichier .env cr√©√©. Vous pouvez le modifier selon vos besoins."
        print_info "Localisation: $ENV_FILE"
    fi
}

# Afficher l'aide
show_help() {
    cat << EOF
Usage: $0 [COMMANDE] [OPTIONS]

COMMANDES PRINCIPALES:
  start, up       D√©marrer tous les services
  stop, down      Arr√™ter tous les services
  restart         Red√©marrer tous les services
  build           Construire les images Docker
  rebuild         Reconstruire les images (sans cache)
  status          Afficher le statut des services
  logs            Afficher les logs des services
  shell           Ouvrir un shell dans un conteneur

COMMANDES DE MAINTENANCE:
  clean           Nettoyer les images et volumes non utilis√©s
  reset           R√©initialiser compl√®tement l'environnement
  backup          Sauvegarder les donn√©es MongoDB
  restore         Restaurer les donn√©es MongoDB

COMMANDES DE D√âVELOPPEMENT:
  dev             Mode d√©veloppement avec hot reload
  test            Lancer les tests
  lint            V√©rifier le code (linting)
  deps            Installer/mettre √† jour les d√©pendances

SERVICES OPTIONNELS:
  tools           D√©marrer avec les outils (Mongo Express)
  cache           D√©marrer avec Redis
  proxy           D√©marrer avec Nginx

OPTIONS:
  -h, --help      Afficher cette aide
  -v, --verbose   Mode verbeux
  -q, --quiet     Mode silencieux
  --profile       Utiliser un profil sp√©cifique

EXEMPLES:
  $0 start                    # D√©marrer l'environnement de base
  $0 start --profile tools    # D√©marrer avec Mongo Express
  $0 logs backend             # Voir les logs du backend
  $0 shell backend            # Ouvrir un shell dans le conteneur backend
  $0 test                     # Lancer tous les tests
EOF
}

# Obtenir la commande Docker Compose
get_compose_cmd() {
    if docker compose version &> /dev/null; then
        echo "docker compose"
    else
        echo "docker-compose"
    fi
}

# ==========================================
# COMMANDES PRINCIPALES
# ==========================================

start_services() {
    local profile="${1:-""}"
    local compose_cmd=$(get_compose_cmd)
    
    print_step "D√©marrage des services CesiZen..."
    
    if [ -n "$profile" ]; then
        print_info "Profil activ√©: $profile"
        COMPOSE_PROFILES="$profile" $compose_cmd up -d
    else
        $compose_cmd up -d
    fi
    
    print_success "Services d√©marr√©s avec succ√®s!"
    show_status
    show_urls
}

stop_services() {
    local compose_cmd=$(get_compose_cmd)
    
    print_step "Arr√™t des services CesiZen..."
    $compose_cmd down
    print_success "Services arr√™t√©s avec succ√®s!"
}

restart_services() {
    print_step "Red√©marrage des services CesiZen..."
    stop_services
    sleep 2
    start_services "$1"
}

build_images() {
    local compose_cmd=$(get_compose_cmd)
    local no_cache="${1:-false}"
    
    print_step "Construction des images Docker..."
    
    if [ "$no_cache" = "true" ]; then
        print_info "Construction sans cache..."
        $compose_cmd build --no-cache
    else
        $compose_cmd build
    fi
    
    print_success "Images construites avec succ√®s!"
}

show_status() {
    local compose_cmd=$(get_compose_cmd)
    
    print_step "Statut des services CesiZen:"
    echo
    $compose_cmd ps
    echo
}

show_logs() {
    local service="${1:-""}"
    local compose_cmd=$(get_compose_cmd)
    
    if [ -n "$service" ]; then
        print_info "Logs du service: $service"
        $compose_cmd logs -f "$service"
    else
        print_info "Logs de tous les services (Ctrl+C pour quitter)"
        $compose_cmd logs -f
    fi
}

open_shell() {
    local service="${1:-backend}"
    local compose_cmd=$(get_compose_cmd)
    
    print_info "Ouverture d'un shell dans le conteneur: $service"
    
    case "$service" in
        "backend")
            $compose_cmd exec "$service" /bin/bash
            ;;
        "frontend")
            $compose_cmd exec "$service" /bin/sh
            ;;
        "mongodb")
            $compose_cmd exec "$service" mongosh
            ;;
        *)
            $compose_cmd exec "$service" /bin/sh
            ;;
    esac
}

# ==========================================
# COMMANDES DE MAINTENANCE
# ==========================================

clean_docker() {
    print_step "Nettoyage des ressources Docker non utilis√©es..."
    
    # Arr√™ter les services d'abord
    docker-compose down 2>/dev/null || true
    
    # Nettoyer les images, conteneurs et volumes non utilis√©s
    docker system prune -f
    docker volume prune -f
    
    print_success "Nettoyage termin√©!"
}

reset_environment() {
    print_warning "‚ö†Ô∏è Cette action va supprimer TOUTES les donn√©es !"
    read -p "√ätes-vous s√ªr ? (tapez 'oui' pour confirmer): " confirm
    
    if [ "$confirm" = "oui" ]; then
        print_step "R√©initialisation compl√®te de l'environnement..."
        
        # Arr√™ter et supprimer tout
        docker-compose down -v --remove-orphans 2>/dev/null || true
        
        # Supprimer les images du projet
        docker images | grep cesizen | awk '{print $3}' | xargs -r docker rmi -f
        
        # Supprimer les volumes nomm√©s
        docker volume ls | grep cesizen | awk '{print $2}' | xargs -r docker volume rm
        
        print_success "Environnement r√©initialis√©!"
        print_info "Utilisez '$0 start' pour red√©marrer."
    else
        print_info "R√©initialisation annul√©e."
    fi
}

backup_mongodb() {
    local backup_dir="$PROJECT_ROOT/backups"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$backup_dir/mongodb_backup_$timestamp.archive"
    
    print_step "Sauvegarde de MongoDB..."
    
    # Cr√©er le r√©pertoire de sauvegarde
    mkdir -p "$backup_dir"
    
    # Effectuer la sauvegarde
    docker-compose exec -T mongodb mongodump --archive > "$backup_file"
    
    print_success "Sauvegarde cr√©√©e: $backup_file"
}

# ==========================================
# COMMANDES DE D√âVELOPPEMENT
# ==========================================

run_tests() {
    local compose_cmd=$(get_compose_cmd)
    
    print_step "Lancement des tests CesiZen..."
    
    # Tests backend
    print_info "Tests backend (Python)..."
    $compose_cmd exec backend python -m pytest -v
    
    # Tests frontend
    print_info "Tests frontend (React)..."
    $compose_cmd exec frontend pnpm test --run
    
    print_success "Tests termin√©s!"
}

run_lint() {
    local compose_cmd=$(get_compose_cmd)
    
    print_step "V√©rification du code..."
    
    # Lint backend
    print_info "Lint backend (Python)..."
    $compose_cmd exec backend flake8 .
    $compose_cmd exec backend black --check .
    
    # Lint frontend
    print_info "Lint frontend (TypeScript)..."
    $compose_cmd exec frontend pnpm lint
    
    print_success "V√©rification termin√©e!"
}

update_dependencies() {
    local compose_cmd=$(get_compose_cmd)
    
    print_step "Mise √† jour des d√©pendances..."
    
    # Backend
    print_info "Mise √† jour des d√©pendances Python..."
    $compose_cmd exec backend pip install --upgrade -r requirements.txt
    
    # Frontend
    print_info "Mise √† jour des d√©pendances Node.js..."
    $compose_cmd exec frontend pnpm update
    
    print_success "D√©pendances mises √† jour!"
}

# ==========================================
# AFFICHAGE DES INFORMATIONS
# ==========================================

show_urls() {
    local host="${DOCKER_HOST:-localhost}"
    
    echo -e "${CYAN}"
    echo "==========================================="
    echo "üåê URLS D'ACC√àS"
    echo "==========================================="
    echo -e "${NC}"
    echo -e "${GREEN}Frontend (React):${NC}     http://$host:5173"
    echo -e "${GREEN}Backend API (Flask):${NC}  http://$host:5000"
    echo -e "${GREEN}MongoDB:${NC}              mongodb://$host:27017"
    echo
    echo -e "${YELLOW}Services optionnels:${NC}"
    echo -e "${BLUE}Mongo Express:${NC}        http://$host:8081 (profile: tools)"
    echo -e "${BLUE}Redis:${NC}                redis://$host:6379 (profile: cache)"
    echo -e "${BLUE}Nginx:${NC}                http://$host:80 (profile: proxy)"
    echo
    echo -e "${PURPLE}Comptes par d√©faut:${NC}"
    echo -e "${BLUE}Admin:${NC}                admin@cesizen.local / admin123"
    echo -e "${BLUE}Test User:${NC}            test@cesizen.local / admin123"
    echo
}

# ==========================================
# SCRIPT PRINCIPAL
# ==========================================

main() {
    print_header
    
    # V√©rifier les pr√©requis
    check_docker
    check_env_file
    
    # Changer vers le r√©pertoire du projet
    cd "$PROJECT_ROOT"
    
    # Parser les arguments
    case "${1:-help}" in
        "start"|"up")
            start_services "${2}"
            ;;
        "stop"|"down")
            stop_services
            ;;
        "restart")
            restart_services "${2}"
            ;;
        "build")
            build_images
            ;;
        "rebuild")
            build_images "true"
            ;;
        "status"|"ps")
            show_status
            ;;
        "logs")
            show_logs "${2}"
            ;;
        "shell"|"exec")
            open_shell "${2}"
            ;;
        "clean")
            clean_docker
            ;;
        "reset")
            reset_environment
            ;;
        "backup")
            backup_mongodb
            ;;
        "dev"|"develop")
            start_services "tools"
            ;;
        "test")
            run_tests
            ;;
        "lint")
            run_lint
            ;;
        "deps"|"dependencies")
            update_dependencies
            ;;
        "tools")
            start_services "tools"
            ;;
        "cache")
            start_services "cache"
            ;;
        "proxy")
            start_services "proxy"
            ;;
        "urls"|"info")
            show_urls
            ;;
        "help"|"-h"|"--help"|*)
            show_help
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@" 