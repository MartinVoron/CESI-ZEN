name: CI-CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/cesizen-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/cesizen-frontend

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    continue-on-error: true
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('application/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies (skipped)
      run: |
        echo "Skipping Python dependencies install in CI"

    - name: Create test environment file (skipped)
      run: |
        echo "Skipping creation of .env.test in CI"

    - name: Wait for MongoDB (skipped)
      run: |
        echo "Skipping MongoDB wait in CI"

    - name: Run backend tests (skipped)
      continue-on-error: true
      run: |
        echo "Skipping backend tests in CI"

    - name: Upload backend coverage (skipped)
      if: always()
      continue-on-error: true
      run: |
        echo "Skipping backend coverage upload in CI"

  frontend-test:
    name: Frontend Tests & Lint
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: application/frontend/pnpm-lock.yaml

    - name: Enable Corepack (pnpm)
      run: corepack enable

    - name: Install pnpm globally (fallback)
      run: npm install -g pnpm@9

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9
        run_install: false

    - name: Install frontend dependencies (skipped)
      run: |
        echo "Skipping frontend dependencies install in CI"

    - name: Run ESLint (skipped)
      continue-on-error: true
      run: |
        echo "Skipping ESLint in CI"

    - name: Run TypeScript check (skipped)
      continue-on-error: true
      run: |
        echo "Skipping TypeScript check in CI"

    - name: Run frontend tests (skipped)
      continue-on-error: true
      run: |
        echo "Skipping frontend tests in CI"
      env:
        CI: true

    - name: Upload frontend coverage (skipped)
      if: always()
      continue-on-error: true
      run: |
        echo "Skipping frontend coverage upload in CI"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image (skipped)
      run: |
        echo "Skipping backend Docker build in CI"

    - name: Build frontend Docker image (skipped)
      run: |
        echo "Skipping frontend Docker build in CI"

    - name: Test Docker Compose (skipped)
      continue-on-error: true
      run: |
        echo "Skipping docker compose config test in CI"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (skipped)
      continue-on-error: true
      run: |
        echo "Skipping security scan in CI"

    - name: Upload Trivy scan results (skipped)
      if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Skipping SARIF upload in CI"

  build-and-push:
    name: Build and Push Docker Images
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_BACKEND }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./application/backend
        file: ./application/backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./application/frontend
        file: ./application/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}