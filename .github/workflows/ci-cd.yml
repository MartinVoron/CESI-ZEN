name: CI-CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/cesizen-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/cesizen-frontend

permissions:
  contents: read
  packages: write

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('application/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd application/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pymongo

    - name: Create test environment file
      run: |
        cd application/backend
        cat > .env.test << EOF
        FLASK_ENV=testing
        FLASK_DEBUG=False
        MONGO_URI=mongodb://admin:admin123@localhost:27017/cesizen_test_db?authSource=admin
        DB_NAME=cesizen_test_db
        JWT_SECRET=test-jwt-secret
        SECRET_KEY=test-secret-key
        CORS_ORIGINS=http://localhost:3000
        EOF

    - name: Wait for MongoDB (auth ping via PyMongo)
      run: |
        python - << 'PY'
        import time, sys
        from pymongo import MongoClient
        uri = "mongodb://admin:admin123@localhost:27017/admin?authSource=admin"
        for i in range(30):
            try:
                MongoClient(uri, serverSelectionTimeoutMS=1000).admin.command('ping')
                print('MongoDB is ready')
                sys.exit(0)
            except Exception as e:
                print('Waiting for MongoDB...', e)
                time.sleep(2)
        sys.exit(1)
        PY

    - name: Run backend tests
      run: |
        cd application/backend
        python -m pytest --cov=. --cov-report=xml --cov-report=term-missing -v
      env:
        PYTHONPATH: .

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./application/backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-test:
    name: Frontend Tests & Lint
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: application/frontend/pnpm-lock.yaml

    - name: Enable Corepack (pnpm)
      run: corepack enable

    - name: Install frontend dependencies
      run: |
        cd application/frontend
        pnpm install --frozen-lockfile

    - name: Run ESLint
      run: |
        cd application/frontend
        pnpm run lint

    - name: Run TypeScript check
      run: |
        cd application/frontend
        pnpm exec tsc --noEmit

    - name: Run frontend tests
      run: |
        cd application/frontend
        pnpm run test --coverage
      env:
        CI: true

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./application/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        cd application/backend
        docker build -f Dockerfile.dev -t cesizen-backend-dev .

    - name: Build frontend Docker image
      run: |
        cd application/frontend
        docker build -f Dockerfile.dev -t cesizen-frontend-dev .

    - name: Test Docker Compose
      run: |
        # Create temporary env files for testing
        cp application/backend/env.dev.template application/backend/.env.dev
        cp application/frontend/env.local.template application/frontend/.env.local
        
        # Test docker-compose configuration
        docker compose -f docker-compose.dev.yml config

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Images
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_BACKEND }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./application/backend
        file: ./application/backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./application/frontend
        file: ./application/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}