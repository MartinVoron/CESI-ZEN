name: 🧪 Tests Automatisés CesiZen

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Tests nightly à 2h du matin UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Tests de fumée rapides sur chaque commit
  smoke-tests:
    name: 🚀 Tests de Fumée
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔧 Install dependencies
        run: |
          cd CesiZen/test-automation
          npm ci
          npx playwright install chromium
      
      - name: 🏃 Run smoke tests
        run: |
          cd CesiZen/test-automation
          npm run test:smoke
        env:
          TEST_ENV: ci
          HEADLESS: true
      
      - name: 📊 Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: |
            CesiZen/test-automation/reports/
            CesiZen/test-automation/logs/
          retention-days: 7

  # Tests de non-régression sur les PR
  regression-tests:
    name: 🔄 Tests de Non-Régression
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:4.4
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔧 Install dependencies
        run: |
          cd CesiZen/test-automation
          npm ci
          npx playwright install
          
          # Install Python dependencies for backend tests
          cd ../application/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: 🏗️ Build frontend
        run: |
          cd CesiZen/application/frontend
          npm ci
          npm run build
      
      - name: 🧪 Run regression tests
        run: |
          cd CesiZen/test-automation
          npm run test:regression
        env:
          TEST_ENV: ci
          MONGO_URI: mongodb://root:password@localhost:27017/cesizen_test?authSource=admin
          BASE_URL: http://localhost:5173
          API_URL: http://localhost:5001
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: regression-test-results
          path: |
            CesiZen/test-automation/reports/
            CesiZen/test-automation/logs/
            CesiZen/test-automation/test-results/
          retention-days: 30
      
      - name: 📝 Comment PR with test results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = 'CesiZen/test-automation/reports/test-report.json';
            
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const passed = results.results.passed;
              const failed = results.results.failed;
              const total = passed + failed;
              const successRate = ((passed / total) * 100).toFixed(1);
              
              const body = `
              ## 🧪 Résultats des Tests de Non-Régression
              
              - ✅ **Tests réussis**: ${passed}
              - ❌ **Tests échoués**: ${failed}
              - 📊 **Taux de réussite**: ${successRate}%
              - ⏱️ **Durée**: ${Math.round(results.results.duration / 1000)}s
              
              ${failed > 0 ? '⚠️ **Certains tests ont échoué.** Consultez les artefacts pour plus de détails.' : '🎉 **Tous les tests sont passés!**'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Tests complets nightly
  full-test-suite:
    name: 🌙 Tests Complets Nightly
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [development, staging]
        browser: [chromium, firefox, webkit]
    
    services:
      mongodb:
        image: mongo:4.4
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔧 Install dependencies
        run: |
          cd CesiZen/test-automation
          npm ci
          npx playwright install
          
          cd ../application/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: 🏗️ Build and start applications
        run: |
          # Build frontend
          cd CesiZen/application/frontend
          npm ci
          npm run build
          
          # Start backend (background)
          cd ../backend
          python main.py &
          sleep 10
          
          # Start frontend (background)
          cd ../frontend
          npm run preview &
          sleep 5
      
      - name: 🧪 Run full test suite
        run: |
          cd CesiZen/test-automation
          npm run test:full
        env:
          TEST_ENV: ${{ matrix.environment }}
          BROWSER: ${{ matrix.browser }}
          MONGO_URI: mongodb://root:password@localhost:27017/cesizen_test?authSource=admin
      
      - name: 📊 Upload comprehensive results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: full-test-results-${{ matrix.environment }}-${{ matrix.browser }}
          path: |
            CesiZen/test-automation/reports/
            CesiZen/test-automation/logs/
            CesiZen/test-automation/test-results/
            CesiZen/test-automation/screenshots/
          retention-days: 90

  # Tests de performance
  performance-tests:
    name: ⚡ Tests de Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: |
          cd CesiZen/test-automation
          npm ci
          npx playwright install chromium
      
      - name: 🏗️ Build frontend
        run: |
          cd CesiZen/application/frontend
          npm ci
          npm run build
          npm run preview &
          sleep 10
      
      - name: ⚡ Run performance tests
        run: |
          cd CesiZen/test-automation
          npm run test:performance
        env:
          TEST_ENV: ci
          BASE_URL: http://localhost:4173
      
      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            CesiZen/test-automation/reports/performance-report.html
            CesiZen/test-automation/reports/performance-report.json
          retention-days: 30
      
      - name: 🎯 Performance Budget Check
        run: |
          cd CesiZen/test-automation
          node -e "
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('reports/performance-report.json', 'utf8'));
            
            let failed = false;
            const budgets = {
              performance: 80,
              accessibility: 90,
              bestPractices: 80,
              seo: 80
            };
            
            Object.entries(results.results.lighthouse || {}).forEach(([page, data]) => {
              if (data.scores) {
                Object.entries(budgets).forEach(([metric, budget]) => {
                  if (data.scores[metric] < budget) {
                    console.error(\`❌ \${page} - \${metric}: \${data.scores[metric]}% < \${budget}% (budget)\`);
                    failed = true;
                  } else {
                    console.log(\`✅ \${page} - \${metric}: \${data.scores[metric]}%\`);
                  }
                });
              }
            });
            
            if (failed) {
              console.error('❌ Performance budget check failed!');
              process.exit(1);
            } else {
              console.log('🎉 All performance budgets met!');
            }
          "

  # Tests de sécurité
  security-tests:
    name: 🔒 Tests de Sécurité
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install dependencies
        run: |
          cd CesiZen/test-automation
          npm ci
      
      - name: 🔍 Run dependency audit
        run: |
          cd CesiZen/application/frontend
          npm audit --audit-level high
          
          cd ../backend
          pip install safety
          safety check
      
      - name: 🔒 Run security tests
        run: |
          cd CesiZen/test-automation
          npm run test:security
        env:
          TEST_ENV: ci
      
      - name: 📊 Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            CesiZen/test-automation/reports/
            CesiZen/test-automation/logs/
          retention-days: 90

  # Notification des résultats
  notify-results:
    name: 📢 Notification des Résultats
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, performance-tests, security-tests]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'pull_request')
    
    steps:
      - name: 📊 Prepare notification
        id: prepare
        run: |
          if [[ "${{ needs.smoke-tests.result }}" == "success" && 
                "${{ needs.regression-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=🎉 Tous les tests sont passés avec succès!" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=⚠️ Certains tests ont échoué. Vérifiez les détails." >> $GITHUB_OUTPUT
            echo "color=d73a49" >> $GITHUB_OUTPUT
          fi
      
      # Ici vous pouvez ajouter des notifications Slack, Discord, email, etc.
      - name: 📬 Send notification (placeholder)
        run: |
          echo "Status: ${{ steps.prepare.outputs.status }}"
          echo "Message: ${{ steps.prepare.outputs.message }}"
          # Ajoutez ici votre logique de notification (Slack, Teams, etc.)

  # Nettoyage des artefacts anciens
  cleanup:
    name: 🧹 Nettoyage
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 🗑️ Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            } 