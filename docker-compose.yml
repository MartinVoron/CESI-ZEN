# ==========================================
# CESIZEN - DOCKER COMPOSE CONFIGURATION
# ==========================================
# Environment de d√©veloppement complet avec MongoDB, Backend Flask et Frontend React

version: '3.8'

# ==========================================
# SERVICES CONFIGURATION
# ==========================================
services:

  # ==========================================
  # DATABASE - MONGODB
  # ==========================================
  mongodb:
    image: mongo:6.0
    container_name: cesizen-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-cesizen-dev-password}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-CesiZen}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - cesizen-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ==========================================
  # BACKEND - FLASK API
  # ==========================================
  backend:
    build:
      context: ./application/backend
      dockerfile: Dockerfile
      target: development
    container_name: cesizen-backend
    restart: unless-stopped
    environment:
      # Database
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-cesizen-dev-password}@mongodb:27017/${MONGO_DB_NAME:-CesiZen}?authSource=admin
      DB_NAME: ${MONGO_DB_NAME:-CesiZen}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-cesizen-dev-secret-key-change-in-production}
      JWT_EXPIRATION_DELTA: ${JWT_EXPIRATION_DELTA:-86400}
      
      # Flask
      FLASK_ENV: development
      FLASK_DEBUG: "True"
      FLASK_APP: main.py
      
      # CORS
      FRONTEND_URL: http://localhost:5173
    volumes:
      - ./application/backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      # Exclure node_modules et __pycache__ pour les performances
      - /app/__pycache__
      - /app/.pytest_cache
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    networks:
      - cesizen-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:5000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    develop:
      watch:
        - action: sync
          path: ./application/backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"
            - .pytest_cache/
            - logs/

  # ==========================================
  # FRONTEND - REACT APP
  # ==========================================
  frontend:
    build:
      context: ./application/frontend
      dockerfile: Dockerfile
      target: development
    container_name: cesizen-frontend
    restart: unless-stopped
    environment:
      # Vite configuration
      VITE_API_BASE_URL: http://localhost:5000
      VITE_APP_NAME: CesiZen
      VITE_APP_VERSION: 1.0.0
      VITE_NODE_ENV: development
      
      # Development
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      
      # Hot reload
      HMR: "true"
    volumes:
      - ./application/frontend:/app
      - frontend_node_modules:/app/node_modules
      # Exclure dist et cache pour les performances
      - /app/dist
      - /app/.vite
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
      - "${FRONTEND_PREVIEW_PORT:-4173}:4173"
    networks:
      - cesizen-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:5173 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    develop:
      watch:
        - action: sync
          path: ./application/frontend
          target: /app
          ignore:
            - node_modules/
            - dist/
            - .vite/

  # ==========================================
  # OPTIONAL SERVICES
  # ==========================================

  # MongoDB Express - Interface web pour MongoDB
  mongo-express:
    image: mongo-express:1.0.0
    container_name: cesizen-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-cesizen-dev-password}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-cesizen-admin}
      ME_CONFIG_SITE_BASEURL: /mongo-express/
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    networks:
      - cesizen-network
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - tools

  # Redis - Cache et sessions (optionnel)
  redis:
    image: redis:7-alpine
    container_name: cesizen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cesizen-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cesizen-network
    healthcheck:
      test: redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-cesizen-redis-password} ping
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache

  # Nginx - Reverse proxy (optionnel pour dev)
  nginx:
    image: nginx:alpine
    container_name: cesizen-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites/:/etc/nginx/sites-available/:ro
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    networks:
      - cesizen-network
    depends_on:
      - frontend
      - backend
    profiles:
      - proxy

# ==========================================
# NETWORKS CONFIGURATION
# ==========================================
networks:
  cesizen-network:
    name: cesizen-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# VOLUMES CONFIGURATION
# ==========================================
volumes:
  # Database
  mongodb_data:
    name: cesizen_mongodb_data
    driver: local
  
  mongodb_config:
    name: cesizen_mongodb_config
    driver: local
  
  redis_data:
    name: cesizen_redis_data
    driver: local

  # Backend
  backend_logs:
    name: cesizen_backend_logs
    driver: local
  
  backend_uploads:
    name: cesizen_backend_uploads
    driver: local

  # Frontend
  frontend_node_modules:
    name: cesizen_frontend_node_modules
    driver: local 